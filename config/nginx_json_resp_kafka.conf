worker_processes  2;  
   
events {  
    use epoll;  
    worker_connections  65535;  
}  
   
http {  
    include       mime.types;  
    default_type  application/octet-stream;  
    sendfile        on;  
    keepalive_timeout  0;  
    gzip on;  
    gzip_min_length  1k;  
    gzip_buffers     4 8k;  
    gzip_http_version 1.1;  
    gzip_types       text/plain application/x-javascript text/css application/xml application/X-JSON;  
    charset UTF-8; 

    resolver 172.16.3.13 172.16.3.14;   
    
    # 配置后端代理服务  
    upstream rc{  
         server 0.0.0.0:7180 weight=5 max_fails=3;  
#        server 10.10.*.16:8080 weight=5 max_fails=3;  
#        server 10.16.*.54:8080 weight=5 max_fails=3;  
#        server 10.16.*.55:8080 weight=5 max_fails=3;  
#        server 10.10.*.113:8080 weight=5 max_fails=3;  
#        server 10.10.*.137:8080 weight=6 max_fails=3;  
#        server 10.10.*.138:8080 weight=6 max_fails=3;  
#        server 10.10.*.33:8080 weight=4 max_fails=3;  
#        # 最大长连数  
        keepalive 32;  
    }  
    # 配置lua依赖库地址  
    lua_package_path "/opt/openresty/lualib/kafka/?.lua;;";  
   
    server {  
        listen       80;  
        server_name  localhost;  
        location /favicon.ico {  
            root   html;  
                index  index.html index.htm;  
        }  
        
     set $resp_body ""; # // 这个必须放到最外层，否则日志取不到默认值
        location / {  
            proxy_connect_timeout 8;  
            proxy_send_timeout 8;  
            proxy_read_timeout 8;  
            proxy_buffer_size 4k;  
            proxy_buffers 512 8k;  
            proxy_busy_buffers_size 8k;  
            proxy_temp_file_write_size 64k;  
            proxy_next_upstream http_500 http_502  http_503 http_504  error timeout invalid_header;  
            root   html;  
            index  index.html index.htm;  
            proxy_pass http://rc;  
            proxy_http_version 1.1;  
            proxy_set_header Connection "";  
          
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  
            # 使用log_by_lua 包含lua代码,因为log_by_lua指令运行在请求最后且不影响proxy_pass机制  
            lua_need_request_body on;
            body_filter_by_lua '
                        local resp_body = string.sub(ngx.arg[1], 1, 1000)
                        ngx.ctx.buffered = (ngx.ctx.buffered or"") .. resp_body
                        if ngx.arg[2] then
                                ngx.var.resp_body = ngx.ctx.buffered
                        end
            ';


               log_by_lua '  
                -- 引入lua所有api  
                local cjson = require "cjson"  
                local producer = require "resty.kafka.producer"  
                -- 定义kafka broker地址，ip需要和kafka的host.name配置一致  
                local broker_list = {  
                    { host = "10.2.30.11", port = 9092 },
                    { host = "10.2.30.12", port = 9092 },
                    { host = "10.2.30.13", port = 9092 },
                    { host = "10.2.30.14", port = 9092 }, 
                    { host = "10.2.30.15", port = 9092 },
                }  
                -- 定义json便于日志数据整理收集  
                local log_json = {}  
                log_json["uri"]=ngx.var.uri  
                log_json["args"]=ngx.var.args  
                log_json["host"]=ngx.var.host  
                log_json["request_body"]=ngx.var.request_body  
                log_json["remote_addr"] = ngx.var.remote_addr  
                log_json["remote_user"] = ngx.var.remote_user  
                log_json["time_local"] = ngx.var.time_local  
                log_json["status"] = ngx.var.status  
                log_json["body_bytes_sent"] = ngx.var.body_bytes_sent  
                log_json["http_referer"] = ngx.var.http_referer  
                log_json["http_user_agent"] = ngx.var.http_user_agent  
                log_json["http_x_forwarded_for"] = ngx.var.http_x_forwarded_for  
                log_json["upstream_response_time"] = ngx.var.upstream_response_time  



                log_json["upstream_resp_body"] = ngx.var.resp_body
                log_json["request_time"] = ngx.var.request_time  
                -- 转换json为字符串  
                local message = cjson.encode(log_json);  
                -- 定义kafka异步生产者  
                local bp = producer:new(broker_list, { producer_type = "async" })  
                -- 发送日志消息,send第二个参数key,用于kafka路由控制:  
                -- key为nill(空)时，一段时间向同一partition写入数据  
                -- 指定key，按照key的hash写入到对应的partition  
                local ok, err = bp:send("testNginxLog", nil, message)  
   
                if not ok then  
                    ngx.log(ngx.ERR, "kafka send err:", err)  
                    return  
                end  
            ';  
        }  
        error_page   500 502 503 504  /50x.html;  
        location = /50x.html {  
            root   html;  
        }  
    }  
}  
